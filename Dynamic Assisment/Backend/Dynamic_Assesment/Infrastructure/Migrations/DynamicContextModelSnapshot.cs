// <auto-generated />
using System;
using Infrastructure.Contexr;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DynamicContext))]
    partial class DynamicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AssessmentQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Questions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("Application.Interface.IDynamicContext.AssessmentQuestions");
                });

            modelBuilder.Entity("Domain.Entities.AssessmentTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IsScorable")
                        .HasColumnType("int");

                    b.Property<bool>("Isactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Application.Interface.IDynamicContext.AssessmentTables");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PatientsTable");
                });

            modelBuilder.Entity("Domain.Entities.PatientToAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<int?>("AssessmentTableId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("AssessmentTableId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientToAssessmentsTable");
                });

            modelBuilder.Entity("Domain.Entities.PatientToAssessmentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientAssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SavedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientAssessmentId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PatientToAssessmentDetailsTable");
                });

            modelBuilder.Entity("Domain.Entities.QuestionResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserResponse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionResponses");
                });

            modelBuilder.Entity("Domain.Entities.AssessmentQuestion", b =>
                {
                    b.HasOne("Domain.Entities.AssessmentTable", "AssessmentTable")
                        .WithMany("AssessmentQuestions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentTable");
                });

            modelBuilder.Entity("Domain.Entities.PatientToAssessment", b =>
                {
                    b.HasOne("Domain.Entities.AssessmentTable", "AssessmentTable")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AssessmentTable", null)
                        .WithMany("PatientToAssessments")
                        .HasForeignKey("AssessmentTableId");

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("patientToAssessments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssessmentTable");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.PatientToAssessmentDetails", b =>
                {
                    b.HasOne("Domain.Entities.PatientToAssessment", "PatientToAssessment")
                        .WithMany("PatientToAssessmentDetails")
                        .HasForeignKey("PatientAssessmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AssessmentQuestion", "AssessmentQuestion")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .IsRequired();

                    b.Navigation("AssessmentQuestion");

                    b.Navigation("PatientToAssessment");
                });

            modelBuilder.Entity("Domain.Entities.AssessmentTable", b =>
                {
                    b.Navigation("AssessmentQuestions");

                    b.Navigation("PatientToAssessments");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("patientToAssessments");
                });

            modelBuilder.Entity("Domain.Entities.PatientToAssessment", b =>
                {
                    b.Navigation("PatientToAssessmentDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
